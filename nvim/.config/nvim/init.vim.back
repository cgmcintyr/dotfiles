" == Helper Functions ============================================== "

function! _PlugLoaded(name)
	"""Return 1 if name is an installed plugin else 0"""
	return (
		\ has_key(g:plugs, a:name) &&
		\ isdirectory(g:plugs[a:name].dir) &&
		\ stridx(&rtp, g:plugs[a:name].dir) >= 0)
endfunction


function TabToggle()
	"""Toggle between tab and space indentation"""
	if &expandtab
		set shiftwidth=8
		set softtabstop=0
		set noexpandtab
	else
		set shiftwidth=4
		set softtabstop=4
		set expandtab
	endif
endfunction


function! NextClosedFold(dir)
	let cmd = 'norm!z' . a:dir
	let view = winsaveview()
	let [l0, l, open] = [0, view.lnum, 1]
	while l != l0 && open
		exe cmd
		let [l0, l] = [l, line('.')]
		let open = foldclosed(l) < 0
	endwhile
	if open
		call winrestview(view)
	endif
endfunction


" == Setup Functions =============================================== "

function! SetupLanguageClient()
	if _PlugLoaded('LanguageClient-neovim')
		let g:LanguageClient_serverCommands = {
			\ 'python': ['pyls'],
			\ 'rust': ['rls'],
			\ 'go': ['~/devel/go/bin/go-langserver'],
			\ 'ruby': ['solagraph', 'stdio'],
			\ 'c': ['cquery', '--log-file=/tmp/cq.log']}
		let g:LanguageClient_loadSettings = 1 " Use an absolute configuration path if you want system-wide settings
		let g:LanguageClient_settingsPath = '~/.config/nvim/settings.json'
		set completefunc=LanguageClient#complete
		set formatexpr=LanguageClient_textDocument_rangeFormatting()
		nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
		autocmd FileType ruby setlocal omnifunc=LanguageClient#complete
	endif
endfunction

function! SetupMarkdownPreview()
	if _PlugLoaded('markdown-preview.nvim')
		" example
		nmap <C-s> <Plug>MarkdownPreview
		nmap <M-s> <Plug>MarkdownPreviewStop
		nmap <C-p> <Plug>MarkdownPreviewToggle
	endif
endfunction


function! SetupCompletions()
	if _PlugLoaded('ncm2') == 0
		return 0
	endif
	augroup ncm2
		autocmd!
		autocmd BufEnter * call ncm2#enable_for_buffer()
	augroup END
	set completeopt=noinsert,menuone,noselect
	set shortmess+=c
	let g:ncm2#complete_length = 1
endfunction


function! SetupColorScheme()
	if _PlugLoaded('vim-colorschemes')
		colorscheme 1989
	endif
	" Enable syntax highlighting
	syntax on
	" Monochrome visual highlights
	hi Visual ctermbg=7 ctermfg=0
	" Popupmenu colors
	hi Pmenu ctermfg=7 ctermbg=0
	" Whitespace
	hi NonText cterm=NONE ctermfg=242
endfunction


fun SetupFolding()
	set foldlevel=1
	set foldlevelstart=1
	set foldnestmax=3
	set foldmethod=syntax
	nnoremap <silent> <leader>zj :call NextClosedFold('j')<cr>
	nnoremap <silent> <leader>zk :call NextClosedFold('k')<cr>
	augroup foldingbyfiletype
		autocmd!
		autocmd FileType elixir setlocal foldlevel=0 foldlevelstart=0 foldnestmax=1
		autocmd FileType python setlocal foldlevel=0 foldlevelstart=0 foldnestmax=10
		autocmd FileType go setlocal foldlevel=1 foldlevelstart=1 foldnestmax=2
	augroup END
	if _PlugLoaded('SimpylFold')
		let g:SimpylFold_docstring_preview = 1
	endif
endf


fun SetupLatex()
    if _PlugLoaded('vimtex')
        autocmd BufReadPre *.tex let b:vimtex_main = 'main.tex'
    endif
endf


function! SetupStandardDisplay()
	" Show line numbers
	set number
	" Wrap lines
	set wrap
	" Visible whitespace
	set listchars=tab:>.,trail:Â·,extends:\#,nbsp:.
	set list
endfunction


function! RegisterVimrcMappings()
	nnoremap <silent> <leader>R :source ~/.config/nvim/init.vim <cr>
	nnoremap <silent> <leader>E :edit ~/.config/nvim/init.vim <cr>
endfunction


function! RegisterWelcomeMessage()
	augroup registerwelcomemessage
		autocmd!
		autocmd VimEnter * echo "Welcome back, " . $USER
	augroup END
endfunction


function! RegisterPlugins()
	call plug#begin($HOME . '/.local/share/nvim/plugged/')
		" Display
		Plug 'flazz/vim-colorschemes'
		" Completions
		Plug 'ncm2/ncm2'
		Plug 'roxma/nvim-yarp'
		Plug 'ncm2/ncm2-bufword'
		Plug 'ncm2/ncm2-path'
		Plug 'ncm2/ncm2-ultisnips'
		" LanguageServer Client
		Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': 'bash install.sh'}
		" Meson Build System
		Plug 'igankevich/mesonic'
		" Snippets
		Plug 'SirVer/ultisnips'
		Plug 'honza/vim-snippets'
		" Latex
		Plug 'lervag/vimtex'
		" Elixir
		Plug 'elixir-editors/vim-elixir'
		" Python
		Plug 'tmhedberg/SimpylFold'
		" Writing
		Plug 'reedes/vim-pencil'
		" Coerce to camelcase
		Plug 'tpope/vim-abolish'
		" Golang
		Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
		" Markdown
		Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
	call plug#end()
endfunction

function! SetupGolang()
	augroup golang
		" Tabs not spaces
		au FileType go set noexpandtab
		au FileType go set shiftwidth=4
		au FileType go set softtabstop=4
		au FileType go set tabstop=4
	augroup END
endf



function! Main()
	call RegisterPlugins()
	call SetupCompletions()
	call SetupLanguageClient()
	call SetupColorScheme()
	call SetupFolding()
	call SetupGolang()
	call SetupMarkdownPreview()

	call RegisterWelcomeMessage()
	call RegisterVimrcMappings()

	call SetupStandardDisplay()

	set shiftwidth=4
	set softtabstop=4
	set expandtab
	nnoremap <F9> mz:execute TabToggle()<CR>'z

	" Visual search
	vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

	" Tab to expand snippet if pumvisible
	inoremap <expr> <tab> pumvisible() ? ncm2_ultisnips#expand_or("\<Plug>(ultisnips_expand)", 'm') : "\<tab>"
	" smap <tab> <Plug>(ultisnips_expand)

	" Press enter key to trigger snippet expansion
	" The parameters are the same as `:help feedkeys()`
	let g:UltiSnipsExpandTrigger = "<Plug>(ultisnips_expand)"
	let g:UltiSnipsJumpForwardTrigger = "<c-j>"
	let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
	let g:UltiSnipsRemoveSelectModeMappings = 0
	let g:UltiSnipsEditSplit="vertical"
	let g:UltiSnipsSnippetsDir=$HOME."/.config/nvim/UltiSnips"

	let mapleader=","
	let maplocalleader="\\"
endfunction

call Main()
